<section class="container">
	<article class="row">
		<div id="map" class="col-md-6"></div>
    <input id="pac-input" class="controls" type="text" placeholder="Search Box">
    <div id="locSearch" class="col-md-6"></div>
	</article>
  <article class="row">
    <div class="col-md-6" id="results">
      
    </div>
  </article>
</section>
<script type="text/javascript">

	 function initAutocomplete() {
        var map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: -33.8688, lng: 151.2195},
          zoom: 13,
          mapTypeId: 'roadmap'
        });

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();



          
          if (places.length == 0) {
            return;
          }
          console.log(places);


          // Clear out the old markers.
          markers.forEach(function(marker) {
            $("#locSearch").empty();
            marker.setMap(null);
          });
          markers = [];

          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          var count = 0;
          places.forEach(function(place) {



            newDiv = $("<div>");
            newDiv.attr("data",count);
            newDiv.addClass("searchLinks");
            newDiv.append("<h3>" + place.name + "</h3>");

            for (i=0;i<place.types.length;i++){
              if (place.types[i] === "food"){

                $("#locSearch").append(newDiv);
              };
            };
            console.log(newDiv);



            if (!place.geometry) {
              console.log("Returned place contains no geometry");
              return;
            }
            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };
            
            // Create a marker for each place.
            markers.push(new google.maps.Marker({
              map: map,
              icon: icon,
              title: place.name,
              position: place.geometry.location
            }));

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
            count++;
          });
          map.fitBounds(bounds);

          $(".searchLinks").on("click",function(){
            console.log((this.data.value));
            $("#results").html($("this.data"));
          });


        });

      }

	


</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCWY05iVSVo-RPujdQuiYw2IKD85QqXO60&libraries=places&callback=initAutocomplete"
         async defer></script>